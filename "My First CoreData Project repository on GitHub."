//
//  AppDelegate.h
//  CoreData
//
//  Created by krapendra on 11/19/15.
//  Copyright (c) 2015 migitalmac. All rights reserved.
//

#import <UIKit/UIKit.h>
#import <CoreData/CoreData.h>
#import "ViewController.h"

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;
@property (strong, nonatomic) ViewController *viewController;
@property (nonatomic, retain) UINavigationController *navController;

@property (readonly, strong, nonatomic) NSManagedObjectContext *managedObjectContext;
@property (readonly, strong, nonatomic) NSManagedObjectModel *managedObjectModel;
@property (readonly, strong, nonatomic) NSPersistentStoreCoordinator *persistentStoreCoordinator;

- (void)saveContext;
- (NSURL *)applicationDocumentsDirectory;


@end

//
//  AppDelegate.m
//  CoreData
//
//  Created by krapendra on 11/19/15.
//  Copyright (c) 2015 migitalmac. All rights reserved.
//

#import "AppDelegate.h"

@interface AppDelegate ()

@end

@implementation AppDelegate


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    ViewController *viewCtr;
    viewCtr = [[ViewController alloc]
               initWithNibName:nil
               bundle:nil];
    
    self.viewController = viewCtr;
    
    self.navController = [[UINavigationController alloc]
                          initWithRootViewController:viewCtr];
    self.navController.navigationBarHidden = NO;
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] ;
    self.window.rootViewController = self.navController;
    [self.window makeKeyAndVisible];
    return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application {
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
}

- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}

- (void)applicationWillEnterForeground:(UIApplication *)application {
    // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
}

- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    // Saves changes in the application's managed object context before the application terminates.
    [self saveContext];
}

#pragma mark - Core Data stack

@synthesize managedObjectContext = _managedObjectContext;
@synthesize managedObjectModel = _managedObjectModel;
@synthesize persistentStoreCoordinator = _persistentStoreCoordinator;

- (NSURL *)applicationDocumentsDirectory {
    // The directory the application uses to store the Core Data store file. This code uses a directory named "testp.CoreData" in the application's documents directory.
    return [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];
}

- (NSManagedObjectModel *)managedObjectModel {
    // The managed object model for the application. It is a fatal error for the application not to be able to find and load its model.
    if (_managedObjectModel != nil) {
        return _managedObjectModel;
    }
    NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@"CoreData" withExtension:@"momd"];
    _managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];
    return _managedObjectModel;
}

- (NSPersistentStoreCoordinator *)persistentStoreCoordinator {
    // The persistent store coordinator for the application. This implementation creates and return a coordinator, having added the store for the application to it.
    if (_persistentStoreCoordinator != nil) {
        return _persistentStoreCoordinator;
    }
    
    // Create the coordinator and store
    
    _persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:[self managedObjectModel]];
    NSURL *storeURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@"CoreData.sqlite"];
    NSError *error = nil;
    NSString *failureReason = @"There was an error creating or loading the application's saved data.";
    if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:nil error:&error]) {
        // Report any error we got.
        NSMutableDictionary *dict = [NSMutableDictionary dictionary];
        dict[NSLocalizedDescriptionKey] = @"Failed to initialize the application's saved data";
        dict[NSLocalizedFailureReasonErrorKey] = failureReason;
        dict[NSUnderlyingErrorKey] = error;
        error = [NSError errorWithDomain:@"YOUR_ERROR_DOMAIN" code:9999 userInfo:dict];
        // Replace this with code to handle the error appropriately.
        // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
        NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
        abort();
    }
    
    return _persistentStoreCoordinator;
}


- (NSManagedObjectContext *)managedObjectContext {
    // Returns the managed object context for the application (which is already bound to the persistent store coordinator for the application.)
    if (_managedObjectContext != nil) {
        return _managedObjectContext;
    }
    
    NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];
    if (!coordinator) {
        return nil;
    }
    _managedObjectContext = [[NSManagedObjectContext alloc] init];
    [_managedObjectContext setPersistentStoreCoordinator:coordinator];
    return _managedObjectContext;
}

#pragma mark - Core Data Saving support

- (void)saveContext {
    NSManagedObjectContext *managedObjectContext = self.managedObjectContext;
    if (managedObjectContext != nil) {
        NSError *error = nil;
        if ([managedObjectContext hasChanges] && ![managedObjectContext save:&error]) {
            // Replace this implementation with code to handle the error appropriately.
            // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
            NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
            abort();
        }
    }
}

@end
//
//  ViewController.h
//  CoreData
//
//  Created by krapendra on 11/19/15.
//  Copyright (c) 2015 migitalmac. All rights reserved.
//

#import <UIKit/UIKit.h>

@interface ViewController : UIViewController<UIImagePickerControllerDelegate,UINavigationControllerDelegate>
{
    UIImagePickerController *ImagePicker;
}
@property (strong, nonatomic) IBOutlet NSString *stepUserEmail;
@property (strong, nonatomic) IBOutlet NSString *stepPicPath;
@property (strong, nonatomic) IBOutlet NSString *stepCurrentDate;
@property (strong, nonatomic) IBOutlet NSString *timestamp;;
@property (strong, nonatomic) IBOutlet UILabel *status;

@end

//
//  ViewController.m
//  CoreData
//
//  Created by krapendra on 11/19/15.
//  Copyright (c) 2015 migitalmac. All rights reserved.
//

#import "ViewController.h"
#import "AppDelegate.h"
#import "getPicStoreData.h"

@interface ViewController ()
{
    UIButton *nextVC;
    getPicStoreData *picstoreObj;
}
@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor=[UIColor greenColor];
    
    UIButton *capture=[[UIButton alloc]initWithFrame:CGRectMake(70, 70, 110, 35)];
    capture.backgroundColor=[UIColor lightGrayColor];
    [self.view addSubview:capture];
    [capture setTitle:@"Capture" forState:normal];
    [capture addTarget:self action:@selector(capture_click) forControlEvents:UIControlEventTouchUpInside];
    
    nextVC=[[UIButton alloc]initWithFrame:CGRectMake(70, 170, 110, 35)];
    nextVC.backgroundColor=[UIColor lightGrayColor];
    [nextVC setTitle:@"next" forState:normal];
    [nextVC addTarget:self action:@selector(next_click) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:nextVC];
}

- (void)capture_click
{
    [self selectPhotos];
    
}
-(void)next_click
{
    picstoreObj=[[getPicStoreData alloc]init];
    [self.navigationController pushViewController:picstoreObj animated:YES];
}

- (void)selectPhotos
{
    if (![UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera])
    {
        
        UIAlertView *myAlertView = [[UIAlertView alloc] initWithTitle:@"Error"
                                                              message:@"Device has no camera"
                                                             delegate:nil
                                                    cancelButtonTitle:@"OK"
                                                    otherButtonTitles: nil];
        
        return  [myAlertView show];
        
    }
    ImagePicker = [[UIImagePickerController alloc] init];
    ImagePicker.delegate = self;
    ImagePicker.sourceType = UIImagePickerControllerSourceTypeCamera;
    [self presentViewController:ImagePicker animated:YES completion:NULL];
}

- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info
{
    _stepUserEmail=@"asif@gmail.com";
    
    NSDateFormatter *dateFormatter=[[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"yyyy-MM-dd hh:mm:ss"];
    NSString *datewithtime=[dateFormatter stringFromDate:[NSDate date]];
    _stepCurrentDate=[datewithtime substringToIndex:10];
    _timestamp = [NSString stringWithFormat:@"%f",[[NSDate date] timeIntervalSince1970] * 1000];
    _timestamp=[_timestamp stringByAppendingFormat:@"%@", @".png"];
    
    UIImage *image = [info objectForKey:@"UIImagePickerControllerOriginalImage"];
    
    
#pragma mark - Insert Image into Document Directory
    
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsDirectory = [paths objectAtIndex:0];
    _stepPicPath = [documentsDirectory stringByAppendingPathComponent:_timestamp];
    NSData *imageData = UIImagePNGRepresentation(image);
    [imageData writeToFile:_stepPicPath atomically:NO];
    
    
#pragma mark - Insert Value into Datbase
    
    
    AppDelegate *appDelegate =
    [[UIApplication sharedApplication] delegate];
    
    NSManagedObjectContext *context =
    [appDelegate managedObjectContext];
    NSManagedObject *newContact;
    newContact = [NSEntityDescription
                  insertNewObjectForEntityForName:@"PicDataStore"
                  inManagedObjectContext:context];
    [newContact setValue: _stepUserEmail forKey:@"stepUserEmail"];
    [newContact setValue: _timestamp forKey:@"stepPicPath"];
    [newContact setValue: _stepCurrentDate forKey:@"stepCurrentDate"];
    NSError *error;
    [context save:&error];
    _status.text = @"Contact saved";

    [picker dismissViewControllerAnimated:YES completion:NULL];
}

- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
    [picker dismissViewControllerAnimated:YES completion:NULL];
}


-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
    
    [self.view endEditing:YES];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end
//
//  getPicStoreData.h
//  Capture Image
//
//  Created by krapendra on 11/18/15.
//  Copyright (c) 2015 migitalmac. All rights reserved.
//

#import <UIKit/UIKit.h>

@interface getPicStoreData : UIViewController<UICollectionViewDelegate,UICollectionViewDataSource>
@property (strong, nonatomic) IBOutlet NSString *stepUserEmail;
@property (strong, nonatomic) IBOutlet NSString *stepPicPath;
@property (strong, nonatomic) IBOutlet NSString *stepCurrentDate;
@property (strong, nonatomic) IBOutlet UILabel *status;
@end
//
//  getPicStoreData.m
//  Capture Image
//
//  Created by krapendra on 11/18/15.
//  Copyright (c) 2015 migitalmac. All rights reserved.
//

#import "getPicStoreData.h"
#import "AppDelegate.h"

@interface getPicStoreData ()
{
    NSString *email;
    NSString *date;
    NSMutableArray *picData;
    NSMutableArray *arrayPicData;
    UIImageView *recipeImageView;
}

@end

@implementation getPicStoreData

- (void)viewDidLoad {
    [super viewDidLoad];

        AppDelegate *appDelegate =
        [[UIApplication sharedApplication] delegate];
    
        NSManagedObjectContext *context =
        [appDelegate managedObjectContext];
    
        NSEntityDescription *entityDesc =
        [NSEntityDescription entityForName:@"PicDataStore"
                    inManagedObjectContext:context];
    
        NSFetchRequest *request = [[NSFetchRequest alloc] init];
        [request setEntity:entityDesc];
    
        NSPredicate *pred =
        [NSPredicate predicateWithFormat:@"(stepUserEmail = %@)",
         @"asif@gmail.com"];
        [NSPredicate predicateWithFormat:@"(stepCurrentDate = %@)",
         @"2015-11-21"];
        [request setPredicate:pred];
        NSManagedObject *matches = nil;
    
        NSError *error;
        NSArray *objects = [context executeFetchRequest:request
                                                  error:&error];
        if ([objects count] == 0) {
            _status.text = @"No matches";
        }
        else
        {
            picData=[[NSMutableArray alloc]init];
            for (int i=0; i<[objects count]; i++) {
                matches = objects[i];
                _stepPicPath = [matches valueForKey:@"stepPicPath"];
                [picData addObject:_stepPicPath];
            }
        }
    
    arrayPicData=[[NSMutableArray alloc]init];
    for (int i=0; i<picData.count; i++)
    {
        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,     NSUserDomainMask, YES);
        NSString *documentsDirectory = [paths objectAtIndex:0];
        NSString *getImagePath = [documentsDirectory stringByAppendingPathComponent:[picData objectAtIndex:i]];
        UIImage *image=[UIImage imageWithData:[NSData dataWithContentsOfFile:getImagePath]];
        [arrayPicData addObject:image];
    }
    

    UICollectionViewFlowLayout *layout=[[UICollectionViewFlowLayout alloc] init];
    layout.minimumLineSpacing=5;
    layout.minimumInteritemSpacing=0;
    layout.sectionInset= UIEdgeInsetsMake(0, 5, 0, 5);
    layout.headerReferenceSize=CGSizeMake(self.view.frame.size.width, 70);
    layout.footerReferenceSize=CGSizeMake(self.view.frame.size.width, 30);
    
    UICollectionView* collectionview=[[UICollectionView alloc] initWithFrame:CGRectMake(0,0,self.view.frame.size.width,self.view.frame.size.height) collectionViewLayout:layout];
    [collectionview setDataSource:self];
    [collectionview setDelegate:self];
    collectionview.allowsMultipleSelection = YES;
    [collectionview registerClass:[UICollectionViewCell class] forCellWithReuseIdentifier:@"cellIdentifier"];
    [collectionview setBackgroundColor:[UIColor cyanColor]];
    [self.view addSubview:collectionview];
    
}
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return arrayPicData.count;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    UICollectionViewCell *cell=[collectionView dequeueReusableCellWithReuseIdentifier:@"cellIdentifier" forIndexPath:indexPath];
    recipeImageView=[[UIImageView alloc]initWithFrame:CGRectMake(0, 0, cell.contentView.frame.size.width, cell.contentView.frame.size.height)];
    recipeImageView.image = [arrayPicData objectAtIndex:indexPath.row];
    [cell.contentView addSubview:recipeImageView];
    return cell;
}

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    return CGSizeMake(100, 100);
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end

